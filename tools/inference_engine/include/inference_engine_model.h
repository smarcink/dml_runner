#ifndef INFERENCE_ENGINE_MODEL_DESCRIPTOR_H
#define INFERENCE_ENGINE_MODEL_DESCRIPTOR_H

#include "inference_engine.h"
#include "inference_engine_operators.h"
#include "inference_engine_export.h"

#ifdef __cplusplus
extern "C" {
#endif


typedef struct _inference_engine_model_descriptor_t* inference_engine_model_descriptor_t;
typedef struct _inference_engine_model_partition_t* inference_engine_model_partition_t;
typedef struct _inference_engine_model_partition_t* inference_engine_executable_partition_t;

typedef struct _inference_engine_model_descriptor_config_t
{
    inference_engine_accelerator_type_t* preffered_accelerator_list; // List finished with nullptr. Leave empty for model descriptor to choose.
} inference_engine_model_descriptor_config_t;

INFERENCE_ENGINE_API inference_engine_model_descriptor_t inferenceEngineCreateModelDescriptor(inference_engine_model_descriptor_config_t config, inference_engine_node_t* out_nodes, uint32_t out_nodes_count);
INFERENCE_ENGINE_API void inferenceEngineDestroyModelDescriptor(inference_engine_model_descriptor_t md);
INFERENCE_ENGINE_API inference_engine_model_partition_t* inferenceEngineGetPartitions(inference_engine_model_descriptor_t model_desc);


INFERENCE_ENGINE_API inference_engine_executable_partition_t inferenceEngineCompilePartition(inference_engine_device_t device, inference_engine_model_partition_t partition);


INFERENCE_ENGINE_API inference_engine_result_t inferenceEngineExecute(inference_engine_stream_t device, inference_engine_executable_partition_t exec_partition);

#ifdef __cplusplus
}
#endif

#endif  // INFERENCE_ENGINE_MODEL_DESCRIPTOR_H